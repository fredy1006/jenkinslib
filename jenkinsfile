@Library('jenkinslib') _
def tools = new org.devops.tools()
def build = new org.devops.build()
def deploy = new org.devops.deploy()

String buildType = "${env.buildType}"
String buildSHell = "${env.buildShell}"
String deployhosts = "${env.deployhosts}"


pipeline {
        agent { node { label "master"  //指定运行节点的标签或者名称
                }
        }


        options {
                timestamps()   //日志会有时间
                skipDefaultCheckout()  //删除隐式checkout scm语句
                disableConcurrentBuilds()    //禁止并行
                timeout(time: 1, unit: 'HOURS') //流水线超时设置1h
        }

        stages {
                //下载代码
                stage("GetCode"){ //阶段名称
                        steps{ //步骤
                                timeout(time:5, unit:"MINUTES"){ //步骤超时时间
                                        script{ //填写运行代码
                                                println("获取代码")
                                                tools.PrintMes("获取代码",'green')
                                        }
                                }
                        }
                }


                //构建
                stage("Build"){
                        steps{
                                timeout(time:20, unit:"MINUTES"){
                                        script{
                                                println('应用打包')
                                                build.Build(buildType,buildShell)
                                                tools.PrintMes("应用打包",'green')
                                        }
                                }
                        }
                }



                //代码扫描
                stage("CodeScan"){
                        steps{
                                timeout(time:30, unit:"MINUTES"){
                                        script{
                                                println("代码扫描")
                                                tools.PrintMes("代码扫描",'green')
                                        }
                                }
                        }
                }

                //应用发布
                stage("deploy"){
                        steps{
                                script{
                                        println("应用发布")
                                        deploy.AnsibleDeploy("${deployhosts}"," -m ping")
                                        tools.PrintMes("应用发布",'green')
                                }
                        }
                }

        }


        //构建后操作
        post {
                always {
                        script{
                                println("always")
                        }

                }

                success {
                        script{
                                currentBuild.description += "\n 构建成功!"
                                tools.PrintMes("构建成功",'green')
                        }
                }

                failure {
                        script{
                                currentBuild.description += "\n 构建失败!"
                                tools.PrintMes("构建失败",'red')
                        }
                }

                aborted {
                        script{
                                currentBuild.description += "\n 构建取消!"
                                tools.PrintMes("构建取消",'red')
                        }
                }

        }
}
